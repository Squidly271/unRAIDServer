<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY name      "unRAIDServer">
<!ENTITY author    "LimeTech">
<!ENTITY version   "6.2-beta18">
<!ENTITY pluginURL "https://raw.github.com/limetech/&name;/master/&name;.plg">

<!ENTITY category  "beta">
<!ENTITY zip       "https://s3.amazonaws.com/dnld.lime-technology.com/&category;/unRAIDServer-&version;-x86_64.zip">
<!ENTITY md5       "https://s3.amazonaws.com/dnld.lime-technology.com/&category;/unRAIDServer-&version;-x86_64.md5">
<!ENTITY files     "bzimage,bzroot,make_bootable.bat,make_bootable_mac,memtest,*.txt">

<!ENTITY infozip   "infozip-6.0-i486-1.txz">
]>

<PLUGIN  name="&name;"
         author="&author;"
         version="&version;"
         pluginURL="&pluginURL;">

<CHANGES>
<![CDATA[
unRAID Server OS Change Log
===========================

Version 6.2-beta18
------------------
- system shares handling
- libvirt image file handling
- other stuff

Version 6.2-beta17
------------------
- fixed issue where NTP appears enabled in webGui but is not really enabled
- linux: 4.4.1
- lots of other changes

Version 6.2-beta16
------------------
- add 10Gb ethernet tuning in /etc/sysctl.conf
- enable asynchronous I/O in /etc/samba/smb.conf
- eudev: 3.1.5a: support NVMe
- linux: 4.1.15
- samba: enable async i/o for transfers 4K or larger
- sync with 6.1.7
- slack: stop md/unraid driver cleanly upon system poweroff/reset
- webGui: reverse negative logic in docker image fsck confirmation
- emhttp:
  - Trial key now supports 6 devices, gets time from limetech keyserver
  - support unlimited devices
  - support nvme devices
  - misc other improvements and bug fixes
- shfs: do not reject object creation on cache-only share if no cache disk (just create on array)

Version 6.2-beta15
------------------
- ssmtp: fixed issue where '#' characters could not be used in email account passwords
- webGui: fix bug in Browse.page where presence of dotfiles messed up Location column

Version 6.2-beta14
------------------
- linux: 4.1.13
- linux: [PATCH] ethernet: atheros driver support e2400
- shfs: for cache-only share, if cannot create on cache, go ahead and create on array
- emhttp: Trial has no device limit, just time limit

Version 6.2-beta13
------------------
- unraid: terminate sync/rebuild only if/when all target disks fail

Version 6.2-beta12
------------------
- emhttp: fix disk/share "color" status
- linux: [PATCH] scsi: mvsas support for Asus P9A-I SAS on-board controller
- unraid: allow two failures before terminating in-process parity sync/check
- webGui: enable Apply button upon 'input change' per Eric

Version 6.2-beta11
------------------
- emhttp: added tunables: md_write_method, md_sync_thresh
- unraid: removed deprecated md_write_limit tunable
- webGui: additions to the Disk Settings page tunable settings

Version 6.2-beta10
------------------
- emhttp: do not auto-start parity operation when Starting array in Maintenance mode
- linux: 4.1.12
- linux: add kernel options (per user request):
  - CONFIG_BE2NET: ServerEngines 10Gbps NIC - BladeEngine
- slack: numerous slack-current package updates
- unraid: experimental 'pulse method' of sync stripe generation
- unraid: fix bug in "turbo-write" to array with Q disabled
- unraid: optimize PQ parity check case

Version 6.2-beta9
-----------------
- emhttp: array PQ support enabled only for Pro
- unraid: fix bug in case of writing when and single Data disk plus Q is invalid
- webGui: enable Apply button upon 'input' instead of 'change' per Eric

Version 6.2-beta8
-----------------
- unraid: fix bug upgrading from pre-6.2 super.dat (Q was messed up)
- slack: using Erics kool kid git repot for build machine

Version 6.2-beta7
-----------------
- linux: 4.1.11
- emhtt: no attached device limit for Pro

Version 6.2-beta6
-----------------
- emhttp: support USB storage devices assignable to array and cache/pool

Version 6.2-beta5
-----------------
- samba: remove 'max protocol = SMB3' from /etc/samba/smb.conf (automatic negotiation chooses the appropriate protocol)
- sync with Eric

Version 6.2-beta4
-----------------
- linux: 4.1.10
- fix super.dat corruption when upgrading to 6.2 from earlier versions

Version 6.2-beta3
-----------------
- emhttp: support dual parity
- unraid: support dual parity (P+Q)

Version 6.2-beta2
-----------------
- php: version 5.6.12
- samba: version 4.2.3

Version 6.2-beta1
-----------------
- switch to 'slackware64-current' base packages

]]>
</CHANGES>

<!--
Be compatible with unRAID-5 installplg
-->
<FILE Name="/tmp/&name;.sh" Run="/bin/bash">
<INLINE>
rm /tmp/&name;.sh
# cleanup possibly failed previous download/install attempt
rm -rf /tmp/&name;*
mkdir /tmp/&name;
# check if this is unRAID-5
source /etc/unraid-version
if [ "${version:0:2}" == "5." ]; then
  # prevent endless install loop
  rm -rf /boot/plugins/&name;.plg
  rm -rf /boot/config/plugins/&name;.plg
  # check if 64-bit capable CPU
  if ! grep -q " lm" /proc/cpuinfo ; then
    echo "CPU is not 64-bit capable"
    exit 1
  fi
  # Wait until network is ready by pinging google - thanks bonienl!
  ip=8.8.4.4
  timer=30
  while [[ $timer -gt 0 ]]; do
    if [[ -n $(route -n|awk '/^0.0.0.0/{print $2}') &amp;&amp; $(ping -qnc1 $ip|awk '/received/{print $4}') -eq 1 ]]; then
      break
    fi
    ((timer--))
    sleep 1
  done
  if [[ $timer -eq 0 ]]; then
    echo "No network communication !!!"
    exit 1
  fi
  # unRAID-5 needs infozip
  if [ ! -f /boot/extra/&infozip; ]; then
    echo "Downloading &infozip; package"
    mkdir -p /boot/extra
    wget http://slackware.cs.utah.edu/pub/slackware/slackware-13.1/slackware/a/&infozip; -O /boot/extra/&infozip;
    upgradepkg --install-new /boot/extra/&infozip;
  fi
  # download the release
  if ! wget --no-check-certificate &zip; -O /tmp/&name;.zip ; then
    echo "&zip; download error $?"
    exit 1
  fi
  if ! wget --no-check-certificate &md5; -O /tmp/&name;.md5 ; then
    echo "&md5; download error $?"
    exit 1
  fi
fi
</INLINE>
</FILE>

<!--
Download release from S3
For unRAID-5 this will be skipped because already downloaded above
For unRAID-6 we download here, verifying certificiate
-->
<FILE Name="/tmp/&name;.zip">
<URL>&zip;</URL>
</FILE>
<FILE Name="/tmp/&name;.md5">
<URL>&md5;</URL>
</FILE>

<FILE Name="/tmp/&name;.sh" Run="/bin/bash">
<INLINE>
rm /tmp/&name;.sh
# check download and extract
sum1=$(/usr/bin/md5sum /tmp/&name;.zip)
sum2=$(cat /tmp/&name;.md5)
if [ "${sum1:0:32}" != "${sum2:0:32}" ]; then
  echo "wrong md5"
  exit 1
fi
if ! unzip -d /tmp/&name; /tmp/&name;.zip ; then
  echo "unzip error $?"
  exit 1
fi
# check if enough free space on flash
have=$(df -k /boot | awk ' END { print $4 } ')
need=$(du -Ssk /tmp/&name; | awk ' END { print $1 } ')
source /etc/unraid-version
if [ "${version:0:2}" == "5." ]; then
  # to permit another upgrade
  need=$(($need * 2))
fi
# add some margin for possible additional config info
need=$(($need + 8192))
if [ $need -gt $have ]; then
  echo "boot device shows $have free but upgrade needs $need"
  exit 1
fi
# move release files to flash
mkdir -p /boot/&name;
rm -rf /boot/&name;/*
if ! mv /tmp/&name;/{&files;} /boot/&name; ; then
  echo "flash write error $?, maybe corrupted?"
  rm -rf /boot/&name;/*
  exit 1
fi
# preserve previous version
source /etc/unraid-version
if [ "${version:0:2}" == "6." ]; then
  mkdir -p /boot/previous
  rm -rf /boot/previous/*
  mv /boot/{&files;} /boot/previous
else
  mkdir -p /boot/unRAID5
  rm -rf /boot/unRAID5/*
  # preserve all files in root of flash except ldlinux.sys needed to boot
  find /boot -maxdepth 1 -type f -not -name ldlinux.sys -exec mv {} /boot/unRAID5 \;
  # preserve a few directories
  mv /boot/extra /boot/unRAID5 &amp;&gt; /dev/null
  mv /boot/packages /boot/unRAID5 &amp;&gt; /dev/null
  mv /boot/plugins /boot/unRAID5 &amp;&gt; /dev/null
  mkdir /boot/unRAID5/config
  mv /boot/config/plugins /boot/unRAID5/config &amp;&gt; /dev/null
  # grab a fresh 'go' file
  mv /boot/config/go /boot/unRAID5/config
  cp /tmp/&name;/config/go /boot/config
  # ensure key file is in the 'config' directory
  cp /boot/unRAID5/*.key /boot/config &amp;&gt; /dev/null
fi
# move new version files into place
mv /boot/&name;/* /boot
rmdir /boot/&name;
# if unRaid-6 replace the readme file
if [ "${version:0:2}" == "6." ]; then
  echo "**REBOOT REQUIRED!**" &gt; /usr/local/emhttp/plugins/&name;/README.md
fi
# when upgrading any version prior to 6.2
if [ "${version:0:3}" \&lt; "6.2" ]; then
  if ! grep -q 'IMAGE_FILE' /boot/config/domains.cfg &amp;&gt; /dev/null ; then
    echo 'IMAGE_FILE="/mnt/user/system/libvirt/libvirt.img"' &gt;&gt; /boot/config/domains.cfg
  fi
  if ! grep -q 'IMAGE_SIZE' /boot/config/domains.cfg &amp;&gt; /dev/null ; then
    echo 'IMAGE_SIZE="1"' &gt;&gt; /boot/config/domains.cfg
  fi
fi
# when upgrading any version prior to 6.1
if [ "${version:0:3}" \&lt; "6.1" ]; then
  if ! grep -q 'shareDisk' /boot/config/share.cfg &amp;&gt; /dev/null ; then
    echo 'shareDisk="yes"' &gt;&gt; /boot/config/share.cfg
  fi
fi
# when upgrading from 6.0.x
if [ "${version:0:3}" == "6.0" ]; then
  sed -i 's|dynamix.docker.manager/dockerupdate.php|dynamix.docker.manager/scripts/dockerupdate.php|g' /boot/config/plugins/dynamix/docker-update.cron &amp;&gt; /dev/null
  sed -i 's|sbin/monitor|emhttp/plugins/dynamix/scripts/monitor|g' /boot/config/plugins/dynamix/monitor.cron &amp;&gt; /dev/null
  sed -i 's|/root/mdcmd|/usr/local/sbin/mdcmd|g' /boot/config/plugins/dynamix/parity-check.cron &amp;&gt; /dev/null
  sed -i 's|sbin/plugincheck|emhttp/plugins/dynamix.plugin.manager/scripts/plugincheck|g' /boot/config/plugins/dynamix/plugin-check.cron &amp;&gt; /dev/null
  sed -i 's|sbin/statuscheck|emhttp/plugins/dynamix/scripts/statuscheck|g' /boot/config/plugins/dynamix/status-check.cron &amp;&gt; /dev/null
fi
# if template-repos does not exist
if [ ! -e /boot/config/plugins/dockerMan/template-repos ]; then
  mkdir -p /boot/config/plugins/dockerMan
  echo "https://github.com/limetech/docker-templates" &gt; /boot/config/plugins/dockerMan/template-repos
fi
echo "syncing - please wait..."
sync
echo "Update successful - PLEASE REBOOT YOUR SERVER"
</INLINE>
</FILE>

<!--
The 'remove' script.
-->
<FILE Name="/tmp/&name;.sh" Run="/bin/bash" Method="remove">
<INLINE>
rm /tmp/&name;.sh
# unRAID-5 doesn't support 'remove' method, so we're done
source /etc/unraid-version
if [ "${version:0:2}" == "5." ]; then
  exit 0
fi
if [ -d /boot/previous ]; then
  # restore previous unRAID-6 release
  mv /boot/previous/* /boot
  rmdir /boot/previous
  echo "**REBOOT REQUIRED!**" &gt; /usr/local/emhttp/plugins/&name;/README.md
elif [ -d /boot/unRAID5 ]; then
  # restore previous unRAID-5 release
  rm -rf /boot/extra
  mv /boot/unRAID5/extra /boot &amp;&gt; /dev/null
  rm -rf /boot/plugins
  mv /boot/unRAID5/plugins /boot &amp;&gt; /dev/null
  rm -rf /boot/packages
  mv /boot/unRAID5/packages /boot &amp;&gt; /dev/null
  rm -rf /boot/config/plugins
  mv /boot/unRAID5/config/plugins /boot/config &amp;&gt; /dev/null
  mv /boot/unRAID5/config/go /boot/config
  rmdir /boot/unRAID5/config
  mv /boot/unRAID5/* /boot
  rmdir /boot/unRAID5
else
  echo "Cannot remove, no previous version"
  exit 1
fi
echo "syncing..."
sync
echo "Remove successful - PLEASE REBOOT YOUR SERVER"
</INLINE>
</FILE>

</PLUGIN>
