<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY name      "unRAIDServer">
<!ENTITY author    "LimeTech">
<!ENTITY version   "6.4.0">
<!ENTITY category  "stable">
<!ENTITY pluginURL "https://s3.amazonaws.com/dnld.lime-technology.com/&category;/&name;.plg">
<!ENTITY zip       "https://s3.amazonaws.com/dnld.lime-technology.com/&category;/&name;-&version;-x86_64.zip">
<!ENTITY md5       "https://s3.amazonaws.com/dnld.lime-technology.com/&category;/&name;-&version;-x86_64.md5">
<!ENTITY files     "bz*,make_bootable.bat,make_bootable_linux,make_bootable_mac,memtest,*.txt,syslinux/syslinux.cfg-">

<!ENTITY infozip   "infozip-6.0-i486-1.txz">
]>

<PLUGIN  name="&name;"
         author="&author;"
         version="&version;"
         pluginURL="&pluginURL;">

<CHANGES>
<![CDATA[
Version: 6.4.0 2018-01-12
=========================

Linux kernel
------------

This release is running Linux kernel version 4.14.13 which contains
patches to address the widely reported Meltdown and Spectre
vulnerabilities.  This kernel fully mitigates against Meltdown,
but full mitigation for Spectre is not yet complete and has not been
publicly released as of this date.

Management Utility
------------------

We now use the nginx webserver as the front-end to the unRAID OS
Management Utility (aka, webGUI).  Incorporating nginx provides
several benefits, including:

* Multi-threaded access results in much better response.
* Websocket support.
* SSL/TLS (https) support.

Moving forward, use of websockets will further improve webGUI
functionality and responsiveness.  At present only the CPU Load
Statistics on the Dashboard and the web-based Terminal application
make use of websockets.

> **Note:** Unfortunately this functionality does not work with Safari.

There is now a Logout button for the webGUI which appears on the right
side of the menu bar when you have defined a root password and are
logged in.  Clicking this will *log you out* from all tabs/windows in
that browser.

Also new with this release are two new webGUI themes: Azure and
Gray, along with numerous other bug fixes and improvements.

Secure Access
-------------

Secure webGUI access is now supported using the https protocol.  We
offer two methods for dealing with the SSL certificate:

* Use of a self-signed certificate.
* Use of a free SSL certificate provisioned by Let's Encrypt.

The selection of http/https and SSL certificate configuration is
accomplished through the Settings/Identification page.

> **Note:**
The `/usr/local/sbin/emhttp` line in your `/boot/config/go` file is no
longer used to specify the ports where the webGUI listens for
connections.  Instead you must configure these on the Identification
page.  Alternately if you need to set this up prior to server boot,
you may add the port settings in `/boot/config/ident.cfg`.  Please refer
to `/usr/local/sbin/emhttp` script for more information if you care
about this.

Let's Encrypt SSL Certificates
------------------------------

Lime Technology, Inc. has partnered with Let's Encrypt to provide free
SSL certificates for all of our users.  To obtain your certificate
first go to Settings/Identification page, set Use SSL/TLS to Auto and
click Apply.

Next, scroll to the bottom and click Provision.  In one operation this
will allocate your certificate, upload it to your server, and switch
nginx to redirect all http to https.  After clicking anywhere else in
the webGUI you should see a nice green lock icon in your browser
address bar!

You will also notice in your address bar a very funny
looking URL consisting of a 40-hex-character subdomain of unraid.net.
We have set up a LimeTech DNS server that will resolve that URL to
your servers IP address on your local network.  That FQDN is unique to
your certificate.  When your browser resolves that URL it is given
your local IP address which it then uses to perform the https
connection handshake.

Since Let's Encrypt SSL certificates expire every 90 days, we have
included a background daemon that checks once per day if your
certificate is within 30 days of expiration.  If so, we automatically
renew and upload a new certificate for you.

Finally, we have included another background daemon that checks every 10
minutes for a change in your servers IP address.  If your IP address
changes, then the DNS A-record for your server is updated.

Device Encryption
-----------------

We have implemented full-device encryption as follows.  In unRAID,
encryption is selected as another type of file system.  With array Stopped,
click on a Device link and then click on File system type where you
can selected encrypted versions of supported file system types:

* xfs – encrypted
* btrfs – encrypted
* reiserfs – encrypted

If you change any device file system type to encrypted, you will
notice a section on the Main page appears where you must enter a
passphrase or upload an encryption keyfile before you can Start the
array.

**DO NOT FORGET YOUR PASSPHRASE OR LOSE YOUR KEYFILE.**  Once a device is
encrypted, if you forget your passphrase or lose your keyfile, your
data is lost forever!

Once you have Started the array, newly encrypted devices appear
Unmountable and the Format button is available.  Formatting will
result in creating an encrypted partition on those devices with the
specified file system type.

**ALL PREVIOUS DATA ON THAT DEVICE WILL BE DESTROYED.**  Hence it is not
possible, in this release, to encrypt in-place.  We plan to add 
a utility in a future release to accomplish this however.

Also note that array Autostart following server boot will not succeed
if any devices are encrypted.  This is because the passphrase or keyfile
is kept in RAM and thus lost upon reboot.  This means
that following system reboot you must log into the webGUI, enter your
passphrase (or upload your encryption keyfile), and then click
the Start button.

In the case of a btrfs cache pool, all devices comprising the pool
will be encrypted.

UEFI support
------------

It is now possible configure UEFI boot mode to boot unRAID OS.  This
may be enabled by clicking on the Flash device link from the Main
page where you will find a checkbox to select UEFI boot mode.

In addition, UEFI boot mode may be selected when a new USB Flash
device is provisioned using the USB Creator tool.

When using the manual method of preparing a USB Flash device, the
make_bootable scripts will output a UEFI boot mode selection prompt.

Web-based Terminal
------------------

We now have a web-based Terminal application available by clicking the
Terminal button on the Menu bar.  You may also open
the Terminal in a new tab by right-clicking the button.  This
application makes use of websockets and appears to be quite fast,
give it a try!

> **NOTE:** Unfortunately the web-based Terminal app does not work with Safari.

Update OS
---------

Instead of bundling an unRAID Server plugin on the Plugins page,
there is a new page on the Tools menu in the About section called
Update OS.

Here you can check for a new unRAID OS release as well
as switch between the latest release in the **stable** branch or the latest
release in the **next** (development) branch.

In addition there is a separate control on the Notification
Settings page that configures whether or not to automatically check
for updates.

Improved shfs/mover
-------------------

The unRAID user share file system (shfs) has been improved in two
areas.

First, we now make use of FUSE read_buf/write_buf methods. This should
result in significant throughput increases.

Second, the mover script/move program no longer uses `rsync` to move
files/directories between the cache pool and the parity array. Instead
the move program invokes a new shfs `ioctl()` call.  This should
result in complete preservation of all metadata including atime and
mtime.

Other
-----

* IPv6 support.  Entirely designed, coded, and tested by user *bonienl*
who has greatly improved unRAID OS networking.

* We now fully support *4Kn* devices, that is, devices with
both 4096-byte physical and 4096-byte logical block sizes.

* It used to be that merely Starting the array would re-write an *unRAID
standard partition layout* on all devices assigned to the array. This
has been changed so that nothing is written to a device
unless Format is invoked (except for Parity devices – those will still
be written upon array Start if parity sync is indicated).

* Moving devices around between cache pool and array or unassigned is
handled much better now.

* Added Flash backup button on the Flash device info page
(Main/Flash).  Click this button to download a zip file with the
entire contents of your USB Flash boot device.  This zip file may be
used to restore to a new unRAID USB Flash boot device either manually,
or using the USB Creator tool.

* We ported a simplified version of the `zenstates.py` utility to `C` (to
avoid including python in bzroot) which may be used to
disable Ryzen C6 states (as workaround for Ryzen idle freeze issue).
We have found that sometimes bios option to disable C6
does not exist or does not do the right thing.  If you want to use
this utility, we suggest that you edit the `config/go` file
on your USB flash device.  Add this line just before emhttp is invoked:

    `zenstates --c6-disable`

* Expanded driver support and more hardware monitoring support.

* Kernel modules and firmware are now left on the Flash in a squashfs
loopback and loaded into RAM on demand.

* Many more misc. improvements

Known Issues
------------

* Certain motherboards with on-board Aspeed IPMI graphics adaptors may
lose video or switch to different colored text during the boot
process.  To prevent this, add the `nomodeset` kernel option to your
syslinux `append` line.

* Some users report `vmwrite` syslog errors as a result of VM startup.
This is a harmless message and can be ignored; however, please report
if you see this.

* AMD Ryzen CPU is known to freeze on linux-based distros and unRAID OS
is no exception.  Disabling C6 state either in your bios or using our
zenstates program seems to be the most reliable mitigation for this
issue.  Maybe some day AMD will fix this.

* AMD Threadripper GPU passthrough to VM's does not work reliably.
This is an AMD bug, maybe some day they'll fix it.
]]>
</CHANGES>

<!--
Be compatible with unRAID-5 installplg
-->
<FILE Name="/tmp/&name;.sh" Run="/bin/bash">
<INLINE>
rm /tmp/&name;.sh
# cleanup possibly failed previous download/install attempt
rm -rf /tmp/&name;*
mkdir /tmp/&name;
# check if this is unRAID-5
source /etc/unraid-version
if [[ "${version:0:2}" == "5." ]]; then
  # prevent endless install loop
  rm -rf /boot/plugins/&name;.plg
  rm -rf /boot/config/plugins/&name;.plg
  # check if 64-bit capable CPU
  if ! grep -q " lm" /proc/cpuinfo ; then
    echo "CPU is not 64-bit capable"
    exit 1
  fi
  # Wait until network is ready by pinging google - thanks bonienl!
  ip=8.8.4.4
  timer=30
  while [[ $timer -gt 0 ]]; do
    if [[ -n $(route -n|awk '/^0.0.0.0/{print $2}') &amp;&amp; $(ping -qnc1 $ip|awk '/received/{print $4}') -eq 1 ]]; then
      break
    fi
    ((timer--))
    sleep 1
  done
  if [[ $timer -eq 0 ]]; then
    echo "No network communication !!!"
    exit 1
  fi
  # unRAID-5 needs infozip
  if [ ! -f /boot/extra/&infozip; ]; then
    echo "Downloading &infozip; package"
    mkdir -p /boot/extra
    wget http://slackware.cs.utah.edu/pub/slackware/slackware-13.1/slackware/a/&infozip; -O /boot/extra/&infozip;
    upgradepkg --install-new /boot/extra/&infozip;
  fi
  # download the release
  if ! wget --no-check-certificate &zip; -O /tmp/&name;.zip ; then
    echo "&zip; download error $?"
    exit 1
  fi
  if ! wget --no-check-certificate &md5; -O /tmp/&name;.md5 ; then
    echo "&md5; download error $?"
    exit 1
  fi
fi
</INLINE>
</FILE>

<!--
Download release from S3
For unRAID-5 this will be skipped because already downloaded above
For unRAID-6 we download here, verifying certificiate
-->
<FILE Name="/tmp/&name;.zip">
<URL>&zip;</URL>
</FILE>
<FILE Name="/tmp/&name;.md5">
<URL>&md5;</URL>
</FILE>

<FILE Name="/tmp/&name;.sh" Run="/bin/bash">
<INLINE>
rm /tmp/&name;.sh
# check download and extract
sum1=$(/usr/bin/md5sum /tmp/&name;.zip)
sum2=$(cat /tmp/&name;.md5)
if [[ "${sum1:0:32}" != "${sum2:0:32}" ]]; then
  echo "wrong md5"
  exit 1
fi
if ! unzip -d /tmp/&name; /tmp/&name;.zip ; then
  echo "unzip error $?"
  exit 1
fi
# check if enough free space on flash
have=$(df -k /boot | awk ' END { print $4 } ')
need=$(du -Ssk /tmp/&name; | awk ' END { print $1 } ')
source /etc/unraid-version
if [[ "${version:0:2}" == "5." ]]; then
  # to permit another upgrade
  need=$(($need * 2))
fi
# add some margin for possible additional config info
need=$(($need + 8192))
if [[ $need -gt $have ]]; then
  echo "boot device shows $have free but upgrade needs $need"
  exit 1
fi
# move release files to flash
mkdir -p /boot/&name;
rm -rf /boot/&name;/*
if ! mv /tmp/&name;/{&files;} /boot/&name; ; then
  echo "flash write error $?, maybe corrupted?"
  rm -rf /boot/&name;/*
  exit 1
fi
# preserve previous version
source /etc/unraid-version
if [[ "${version:0:2}" == "6." ]]; then
  mkdir -p /boot/previous
  rm -rf /boot/previous/*
  mv /boot/{&files;} /boot/previous
else
  mkdir -p /boot/unRAID5
  rm -rf /boot/unRAID5/*
  # preserve all files in root of flash except ldlinux.sys needed to boot
  find /boot -maxdepth 1 -type f -not -name ldlinux.sys -exec mv {} /boot/unRAID5 \;
  # preserve a few directories
  mv /boot/extra /boot/unRAID5 &amp;&gt; /dev/null
  mv /boot/packages /boot/unRAID5 &amp;&gt; /dev/null
  mv /boot/plugins /boot/unRAID5 &amp;&gt; /dev/null
  mkdir /boot/unRAID5/config
  mv /boot/config/plugins /boot/unRAID5/config &amp;&gt; /dev/null
  # grab a fresh 'go' file
  mv /boot/config/go /boot/unRAID5/config
  cp /tmp/&name;/config/go /boot/config
  # ensure key file is in the 'config' directory
  cp /boot/unRAID5/*.key /boot/config &amp;&gt; /dev/null
fi
# move new version files into place
mv /boot/&name;/* /boot
rmdir /boot/&name;
# move the new syslinux.cfg- in to the syslinux folder
if [[ -f /boot/syslinux.cfg- ]]; then
  mv /boot/syslinux.cfg- /boot/syslinux
fi
# if unRaid-6 replace the readme file
if [[ "${version:0:2}" == "6." ]]; then
  echo "**REBOOT REQUIRED!**" &gt; /usr/local/emhttp/plugins/&name;/README.md
fi
# if unRaid-6.3 ensure GUI Safe Mode syslinux option exists
if [[ "${version:0:3}" == "6.3" ]]; then
  if ! grep -q 'initrd=/bzroot,/bzroot-gui unraidsafemode' /boot/syslinux/syslinux.cfg &amp;&gt; /dev/null ; then
    sed -i 's|label Memtest86+|label unRAID OS GUI Safe Mode (no plugins)\r\n  kernel /bzimage\r\n  append initrd=/bzroot,/bzroot-gui unraidsafemode\r\nlabel Memtest86+|g' /boot/syslinux/syslinux.cfg &amp;&gt; /dev/null
  fi
fi
# when upgrading any version prior to 6.2
if [[ "${version:0:3}" &lt; "6.2" ]]; then
  if ! grep -q '/bzroot-gui' /boot/syslinux/syslinux.cfg &amp;&gt; /dev/null ; then
    sed -i 's|menu title Lime Technology\r|menu title Lime Technology, Inc.\r|g' /boot/syslinux/syslinux.cfg &amp;&gt; /dev/null
    sed -i 's|label unRAID OS Safe Mode (no plugins)|label unRAID OS GUI Mode\r\n  kernel /bzimage\r\n  append initrd=/bzroot,/bzroot-gui\r\nlabel unRAID OS Safe Mode (no plugins, no GUI)|g' /boot/syslinux/syslinux.cfg &amp;&gt; /dev/null
  fi
fi
# when upgrading any version prior to 6.1
if [[ "${version:0:3}" &lt; "6.1" ]]; then
  if ! grep -q 'shareDisk' /boot/config/share.cfg &amp;&gt; /dev/null ; then
    echo 'shareDisk="yes"' &gt;&gt; /boot/config/share.cfg
  fi
fi
# when upgrading from 6.0.x
if [[ "${version:0:3}" == "6.0" ]]; then
  sed -i 's|dynamix.docker.manager/dockerupdate.php|dynamix.docker.manager/scripts/dockerupdate.php|g' /boot/config/plugins/dynamix/docker-update.cron &amp;&gt; /dev/null
  sed -i 's|sbin/monitor|emhttp/plugins/dynamix/scripts/monitor|g' /boot/config/plugins/dynamix/monitor.cron &amp;&gt; /dev/null
  sed -i 's|/root/mdcmd|/usr/local/sbin/mdcmd|g' /boot/config/plugins/dynamix/parity-check.cron &amp;&gt; /dev/null
  sed -i 's|sbin/plugincheck|emhttp/plugins/dynamix.plugin.manager/scripts/plugincheck|g' /boot/config/plugins/dynamix/plugin-check.cron &amp;&gt; /dev/null
  sed -i 's|sbin/statuscheck|emhttp/plugins/dynamix/scripts/statuscheck|g' /boot/config/plugins/dynamix/status-check.cron &amp;&gt; /dev/null
fi
# if template-repos does not exist
if [[ ! -e /boot/config/plugins/dockerMan/template-repos ]]; then
  mkdir -p /boot/config/plugins/dockerMan
  echo "https://github.com/limetech/docker-templates" &gt; /boot/config/plugins/dockerMan/template-repos
fi
# correct initial EFI syslinux.cfg
if [[ -d /boot/EFI/boot &amp;&amp; "${version}" == "6.4.0-rc4" ]]; then
  cp /tmp/&name;/EFI-/boot/syslinux.cfg /boot/EFI/boot
fi
# if EFI or EFI- directory does not exist
if [[ ! -e /boot/EFI &amp;&amp; ! -e /boot/EFI- ]]; then
  mv /tmp/&name;/EFI- /boot
  sed -i 's|default /syslinux/menu.c32|default menu.c32|g' /boot/syslinux/syslinux.cfg &amp;&gt; /dev/null
fi
echo "syncing - please wait..."
sync
echo "Update successful - PLEASE REBOOT YOUR SERVER"
</INLINE>
</FILE>

<!--
The 'remove' script.
-->
<FILE Name="/tmp/&name;.sh" Run="/bin/bash" Method="remove">
<INLINE>
rm /tmp/&name;.sh
# unRAID-5 doesn't support 'remove' method, so we're done
source /etc/unraid-version
if [[ "${version:0:2}" == "5." ]]; then
  exit 0
fi
if [[ -d /boot/previous ]]; then
  # restore previous unRAID-6 release
  mv /boot/previous/* /boot
  rmdir /boot/previous
  echo "**REBOOT REQUIRED!**" &gt; /usr/local/emhttp/plugins/&name;/README.md
elif [[ -d /boot/unRAID5 ]]; then
  # restore previous unRAID-5 release
  rm -rf /boot/extra
  mv /boot/unRAID5/extra /boot &amp;&gt; /dev/null
  rm -rf /boot/plugins
  mv /boot/unRAID5/plugins /boot &amp;&gt; /dev/null
  rm -rf /boot/packages
  mv /boot/unRAID5/packages /boot &amp;&gt; /dev/null
  rm -rf /boot/config/plugins
  mv /boot/unRAID5/config/plugins /boot/config &amp;&gt; /dev/null
  mv /boot/unRAID5/config/go /boot/config
  rmdir /boot/unRAID5/config
  mv /boot/unRAID5/* /boot
  rmdir /boot/unRAID5
else
  echo "Cannot remove, no previous version"
  exit 1
fi
echo "syncing..."
sync
echo "Remove successful - PLEASE REBOOT YOUR SERVER"
</INLINE>
</FILE>

</PLUGIN>
